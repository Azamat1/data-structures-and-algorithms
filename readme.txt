Цели:
- понять работу структур данных и алгоритмов
- сохранить базу кода для дальнейшего использования в других проектах
- настроить сборку через webpack (разобраться в сборке)

Инфа:
- запуск выбранного теста: npm run test 'test file path'
План: доделываем все структуры данных, паралельно, если это необходимо,
добавляем папку view и туда React компонент

ToDo:
- проверить код, запуск скриптов и сохранить репу в Гит:
  + тесты: скрипт, успешный запуск, успешное прохождение
  - редми
  - в гитхабе сохранить
- выделить в отдельную ветку TS
  - подключить TS
- ветка: React view
  - структуру проекта продумать
  - визуализация дерева Хаффмана:
    - форма сжатия сообщения по Хаффману
    - дерево Хаффмана визуализировать
- сл. структура

- ветка: react router
- ветка: mobx
- реализовать следующий тип деревьев


Done:
+ реализовать нормально вывод дерева в консоли
+ протестировать вывод Tree через Node.js в 1 файле в ручном режиме
+ исправить баги
+ подключить webpack
+ написать тесты с Jest
+ раскидать классы по отдельным файлам
+ ответить на вопросы в конце раздела книги
+ реализовать дерево Хаффмана для сжатия сообщения:
    + реализовать метод вставки в приоритетной очереди
    + реализовать метод извлечения максимума из пр. очереди
    + написать тесты на приоритетную очередь: вставка и извлченеие максимума
    + решить что будет являтся ключом, а что данными в узлах дерева Хаффмана:
        ключ - частота, данные - буквы - разницы особой не вижу
    + перечитать весь алгоритм и понять суть
    + починить построение дерева Хаффмана
    + реализовать построение дерева Хаффмана
    + узнать как запускать тесты Jest отдельно
    + реализовать генерацию кодовой таблицы по введенному тексту
    + написать тест по генерации кодовой таблицы
    + расшифровать закодированный текст
    + порефакторить HuffmanTree.js: get, set
    + порефакторить HuffmanTreeBuilder: get, set
    + порефакторить TextCompressor
    
